import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { useSelector } from 'react-redux';
import { RootState } from '../store';

interface IItem {
    itemId: number;
    name: string;
}

export interface MarketplaceState {
    value: IItem[];
    status: 'idle' | 'loading' | 'failed';
  }
  
  const initialState: MarketplaceState = {
    value: [],
    status: 'idle',
  };

// Here is the async functions
// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const setItemsAsync = createAsyncThunk(
    'marketplace/fetchItems',
    async () => {

      //const marketplaceContract = useSelector((state: RootState) => state.web3.marketplace);
      //const itemCount = await marketplaceContract.itemCount();
    //   const marketplace = useAppSelector(getMarketplaceContract);

    //  const itemCount = await marketplace.itemCount();

      // const itemCount = await marketplace.itemCount()
      // let items = []
      // for (let i = 1; i <= itemCount; i++) {
      //   const item = await marketplace.items(i)
      //   if (!item.sold) {
      //     // get uri url from nft contract
      //     const uri = await nft.tokenURI(item.tokenId)
      //     // use uri to fetch the nft metadata stored on ipfs 
      //     const response = await fetch(uri)
      //     const metadata = await response.json()
      //     // get total price of item (item price + fee)
      //     const totalPrice = await marketplace.getTotalPrice(item.itemId)
      //     // Add item to items array
      //     items.push({
      //       totalPrice,
      //       itemId: item.itemId,
      //       seller: item.seller,
      //       name: metadata.name,
      //       description: metadata.description,
      //       image: metadata.image
      //     })
      //   }
      // }
      // setLoading(false)
      // setItems(items)

      const response = await fetchItems();
      // The value we return becomes the `fulfilled` action payload
      return response.data;
    }
  );

  export const marketplaceSlice = createSlice({
    name: 'marketplace',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
      setItemList: (state, action: PayloadAction<IItem[]>) => {
        state.value = action.payload;
      },
    },
    //extraReducers: (builder) ... for the async function
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(setItemsAsync.pending, (state) => {
          state.status = 'loading';
        })
        .addCase(setItemsAsync.fulfilled, (state, action) => {
          state.status = 'idle';
          state.value = action.payload;
        })
        .addCase(setItemsAsync.rejected, (state) => {
          state.status = 'failed';
        });
    },
  });

export const { setItemList } = marketplaceSlice.actions;

  // The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const getAllItems = (state: RootState) => state.marketplace.value;

export default marketplaceSlice.reducer;

// Funcion hardcoded, es de prueba para ver como trae los items asincronicamente
function fetchItems() {

  const items: IItem[] = [{
    itemId: 1,
    name: 'ShazaM'
  },
  {
    itemId: 2,
    name: 'yay'
  }];

  return new Promise<{ data: IItem[] }>((resolve) =>
    setTimeout(() => resolve({ data: items }), 1000)
  );
}