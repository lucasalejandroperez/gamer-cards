import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { IItem } from '../../model/IItem';
import { fromWei, toWei } from '../../utilities/ethereumHelper';
import { RootState } from '../store';

export interface MarketplaceState {
    items: IItem[];
    status: 'idle' | 'loading' | 'failed';
    loadingPurchase: boolean; 
    loadingPublish: boolean;
  }
  
  const initialState: MarketplaceState = {
    items: [],
    status: 'idle',
    loadingPurchase: false,
    loadingPublish: false,
  };

// Here is the async functions
// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const setItemsAsync = createAsyncThunk(
    'marketplace/getItems',
    async (contracts:any) => {
      const { marketplaceContract, nftContract } = contracts;
      
      let items:IItem[] = [];
      const itemCount = await marketplaceContract.itemCount();
      
      for (let i = 1; i <= itemCount; i++) {
        const item = await marketplaceContract.items(i);
        const level = await marketplaceContract.itemCountOfPurchases(item.itemId.toString());
        const totalPrice = await marketplaceContract.getTotalPrice(item.itemId.toString());
        const uri = await nftContract.tokenURI(parseInt(item.tokenId.toString()));
        // TODO: pasar a axios
        const metadata = await fetch(uri).then(res => res.json());

        if (item.onSale) {
          items.push({
            itemId: item.itemId.toString(),
            nick: metadata.nick,
            team: metadata.team,
            description: metadata.description,
            image: metadata.image,
            seller: item.seller,
            totalPrice: fromWei(totalPrice.toString()),
            level: level.toString()
          });
          items.push({
            itemId: item.itemId.toString(),
            nick: metadata.nick,
            team: metadata.team,
            description: metadata.description,
            image: metadata.image,
            seller: item.seller,
            totalPrice: fromWei(totalPrice.toString()),
            level: level.toString()
          });
          items.push({
            itemId: item.itemId.toString(),
            nick: metadata.nick,
            team: metadata.team,
            description: metadata.description,
            image: metadata.image,
            seller: item.seller,
            totalPrice: fromWei(totalPrice.toString()),
            level: level.toString()
          });
        }
      }

      return items;
    }
  );

  export const purchaseItemAsync = createAsyncThunk(
    'marketplace/purchaseItem',
    async (parameters:any) => {
      const { marketplaceContract, itemId, totalPrice } = parameters;
      const precioTotal = await marketplaceContract.getTotalPrice(itemId);

      console.log('getTotalPrice: ', fromWei(precioTotal));

      await(await marketplaceContract.purchaseItem(itemId, { value: toWei(totalPrice) })).wait();
    }
  );

  export const publishItemAsync = createAsyncThunk(
    'marketplace/publishItem',
    async (parameters:any) => {
      const { marketplaceContract, nftContract, itemId, priceToSell } = parameters;
      // TODO: En realidad el contrato de nft podria estar ya guardado en el marketplace la primera vez que se deploya, porque el address del contrato del NFT que va a manejar el marketplace va a ser siempre el mismo
      await(await marketplaceContract.publishItem(nftContract.address, itemId, toWei(priceToSell))).wait();

      // TODO: deberia de hacer una llamada a setItems ? para cargar devuelta el estado de los items
    }
  );

  export const marketplaceSlice = createSlice({
    name: 'marketplace',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
      setItemList: (state, action: PayloadAction<IItem[]>) => {
        state.items = action.payload;
      },
    },
    //extraReducers: (builder) ... for the async function
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(setItemsAsync.pending, (state) => {
          state.status = 'loading';
        })
        .addCase(setItemsAsync.fulfilled, (state, action) => {
          state.status = 'idle';
          state.items = action.payload;
        })
        .addCase(setItemsAsync.rejected, (state) => {
          state.status = 'failed';
        })
        .addCase(purchaseItemAsync.pending, (state) => {
          state.loadingPurchase = true;
        })
        .addCase(purchaseItemAsync.fulfilled, (state) => {
          state.loadingPurchase = false;
        })
        .addCase(purchaseItemAsync.rejected, (state) => {
          state.loadingPurchase = false;
        })
        .addCase(publishItemAsync.pending, (state) => {
          state.loadingPublish = true;
        })
        .addCase(publishItemAsync.fulfilled, (state) => {
          state.loadingPublish = false;
        })
        .addCase(publishItemAsync.rejected, (state) => {
          state.loadingPublish = false;
        });
    },
  });

export const { setItemList } = marketplaceSlice.actions;

  // The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const getAllItems = (state: RootState) => state.marketplace.items;

export default marketplaceSlice.reducer;